{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyMkxXue7NLc4pVn/IsSVyeF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Harikarthick28/project-python/blob/main/str%20assignment1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to create a new string made of an input string’s first, middle, and last character. Eg: str1= ”PRADEEP” Output: PDP\n"
      ],
      "metadata": {
        "id": "xJpxXKex8tfK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S0s-3dXg8rLW",
        "outputId": "acc10e50-869d-4f02-c37a-d014382e3be2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string:pradeep\n",
            "pdp\n"
          ]
        }
      ],
      "source": [
        "str=input(\"Enter a string:\")\n",
        "a=len(str)//2\n",
        "print(str[0]+str[a]+str[-1])\n",
        "\n",
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to create a new string made of the middle three characters of an input string. Eg: str1= “PRADEEP”\n",
        "Output: ADE"
      ],
      "metadata": {
        "id": "E4HvkXxO9A8j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str=input(\"Enter a string:\")\n",
        "a=len(str)//2\n",
        "b=a-1\n",
        "c=a+1\n",
        "print(str[b]+str[a]+str[c])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-cRAu6fi9BTC",
        "outputId": "807010b5-6e3b-453c-e7c9-4701b3558de4"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string:pradeep\n",
            "ade\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given two strings, str1 and str2. Write a program to create a new string str3 by appending str2 in the middle of str1. Eg: str1= ”STAR” str2= “SUPER” Output: STSUPERAR\n"
      ],
      "metadata": {
        "id": "_kq2HHu59RS-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=input(\"Enter a string:\\n\")\n",
        "b=input(\"Enter a string:\\n\")\n",
        "print(a[0:2]+b+a[-2:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "enkPz_A39NzI",
        "outputId": "89b6fd19-98fd-4dbb-efc2-ef5cd985cbff"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string:\n",
            "star\n",
            "Enter a string:\n",
            "super\n",
            "stsuperar\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given two strings, str1 and str2, write a program to return a new string made of str1 and str2’s first, middle, and last characters. Eg: str1= “LEO” str2= “DAS” Output: LDEAOS\n"
      ],
      "metadata": {
        "id": "bCCxPr1z95Ak"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=input(\"Enter a string:\\n\")\n",
        "b=input(\"Enter a string:\\n\")\n",
        "for i in range(len(a)):\n",
        "    c=a[i]+b[i]\n",
        "    print(c,end=\"\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PtneLxGn92Uw",
        "outputId": "0f65a962-8401-4282-cfdc-b70e7a2eca22"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string:\n",
            "leo\n",
            "Enter a string:\n",
            "das\n",
            "ldeaos"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given two strings, str1 and str2, write a program to return a new string made of str1 and str2’s in reverse order. Eg: str1= ”SUPER” str2= ”STAR” Output: RATSREPUS\n"
      ],
      "metadata": {
        "id": "--HbrOG4-E8A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=input(\"Enter a string:\\n\")\n",
        "b=input(\"Enter a string:\\n\")\n",
        "c=a[::-1]\n",
        "d=b[::-1]\n",
        "print(d+c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j4bU9Ly5-Ju8",
        "outputId": "39682aa5-2fe6-4db8-cbf3-8b0856d1b4fd"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string:\n",
            "super\n",
            "Enter a string:\n",
            "star\n",
            "ratsrepus\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Count all letters, digits, and special symbols from a given string str1 = \"P@#yn26at^&i5ve\" Outcome: Total counts of chars, digits, and symbols Chars = 8 Digits = 3 Symbol = 4\n"
      ],
      "metadata": {
        "id": "vLHqXoH4-SDe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=input(\"Enter a string:\\n\")\n",
        "charcount=0\n",
        "digitcount=0\n",
        "symbolcount=0\n",
        "for i in a:\n",
        "    if i.isalpha():\n",
        "        charcount+=1\n",
        "    elif i.isalnum():\n",
        "        digitcount+=1\n",
        "    else:\n",
        "        symbolcount+=1\n",
        "print(charcount)\n",
        "print(digitcount)\n",
        "print(symbolcount)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VCW91e_X-RHn",
        "outputId": "2d5b80a8-2cdc-47e3-f5f0-7d656234ff3a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string:\n",
            "hjkk2@%^jr#\n",
            "6\n",
            "1\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given two strings, s1 and s2. Write a program to create a new string s3 made of the first char of s1, then the last char of s2, Next, the second char of s1 and second last char of s2, and so on. Any leftover chars go at the end of the result. s1 = \"Abc\" s2 = \"Xyz\" Output: AzbycX\n"
      ],
      "metadata": {
        "id": "Sv2b3Egy-iEm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=input(\"Enter a string: \\n\")\n",
        "b=input(\"Enter a string: \\n\")\n",
        "c=b[::-1]\n",
        "for i in range(len(a)):\n",
        "    d=a[i]+c[i]\n",
        "    print(d,end=\"\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jMz92YOa-n8k",
        "outputId": "9b550536-873a-4c32-9489-5b5027f35aa4"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string: \n",
            "abc\n",
            "Enter a string: \n",
            "xyz\n",
            "azbycx"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to calculate Employee’s bonus calculation for the details given below Experience Bonus (%) More than 8 years 10 % More than 4 years 7% More than 2 years 4%\n"
      ],
      "metadata": {
        "id": "j4aNCvq6-znt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n=int(input(\"Enter no of years:\\n\"))\n",
        "a=int(input(\"Enter salary:\\n\"))\n",
        "b=a*(10/100)\n",
        "c=a*(7/100)\n",
        "d=a*(4/100)\n",
        "if(n>8):\n",
        "    print(\"10% bonus is:\",b)\n",
        "elif(n>4):\n",
        "    print(\"7% bonus is:\",c)\n",
        "elif(n>2):\n",
        "    print(\"4% bonus is:\",d)\n",
        "else:\n",
        "    print(\"Invalid\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vwr-XME1-3oM",
        "outputId": "30bd12aa-0084-4888-96b8-274987295298"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter no of years:\n",
            "7\n",
            "Enter salary:\n",
            "24000\n",
            "7% bonus is: 1680.0000000000002\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to calculate the electricity bill (accept number of units from user) according to the following criteria:\n",
        "Units Price First 100 units No charge Next 100 units Rs.5 per unit After 200 units Rs.10 per unit (For example, if input unit is 350, then the total bill amount is Rs.2000)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "_ucYtsPt-_qk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n=int(input(\"Enter no of units:\\n\"))\n",
        "if(n<100):\n",
        "    print(\"No charge\")\n",
        "else:\n",
        "    if(n>=100 and n<200):\n",
        "        print(f\"The charge for{n} units is:\",((n-100)*5))\n",
        "    elif(n>=200):\n",
        "        print(f\"The charge for {n} units is:\",((n-200)*10)+500)\n",
        "    else:\n",
        "        print(\"not valid\")\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V-BRZfCa_FFk",
        "outputId": "0f5fb945-edaf-4035-bfac-005c8a232562"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter no of units:\n",
            "350\n",
            "The charge for 350 units is: 2000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Accept the marked price from the user and calculate the Net amount as (Marked Price - Discount) to pay according to following criteria: Marked Price Discount\n",
        "10000 20%"
      ],
      "metadata": {
        "id": "qB994f3O_Pvc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=int(input(\"Enter Marked amount:\\n\"))\n",
        "if(a>10000):\n",
        "    b=(a-(a*(20/100)))\n",
        "    print(\"The Netamount is:\",b)\n",
        "elif(a>7000 and a<=10000):\n",
        "    c=(a-(a*(15/100)))\n",
        "    print(\"The Netamount is:\",c)\n",
        "elif(a<=7000):\n",
        "    d=(a-(a*(10/100)))\n",
        "    print(\"The Netamount is:\",d)\n",
        "else:\n",
        "    print(\"Enter valid input\")\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X-4Zkka5_R9v",
        "outputId": "53b43973-4caa-4504-a0ce-d5bebae39bee"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter Marked amount:\n",
            "90000\n",
            "The Netamount is: 72000.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to find the given number is prime number or not.\n"
      ],
      "metadata": {
        "id": "XcPM5mLS_cj9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num=int(input(\"Enter a number:\\n\"))\n",
        "a = False\n",
        "if num == 1:\n",
        "    print(num, \"is not a prime number\")\n",
        "elif num > 1:\n",
        "    for i in range(2, num):\n",
        "        if (num % i) == 0:\n",
        "            a = True\n",
        "            break\n",
        "    if a:\n",
        "        print(num, \"is not a prime number\")\n",
        "    else:\n",
        "        print(num, \"is a prime number\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6f4w--zP_kR7",
        "outputId": "e04ddcbd-1bf0-43f6-86e4-05ca271c69a7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number:\n",
            "47\n",
            "47 is a prime number\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to display all prime numbers within a range\n"
      ],
      "metadata": {
        "id": "GME0scJS_tA0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a= int(input (\"Enter starting value: \"))\n",
        "b= int(input (\"Enter last Value: \"))\n",
        "\n",
        "print (\"The Prime Numbers in the range are: \")\n",
        "for i in range (a,b+1):\n",
        "    if i > 1:\n",
        "        for j in range (2,i):\n",
        "            if (i%j) == 0:\n",
        "                break\n",
        "        else:\n",
        "            print (i)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ypQHDqaI_v67",
        "outputId": "67f28402-51fd-4895-9142-b648503277ce"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter starting value: 0\n",
            "Enter last Value: 10\n",
            "The Prime Numbers in the range are: \n",
            "2\n",
            "3\n",
            "5\n",
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to reverse a number? Example: 3256 will be printed as 6523 (reverse order)"
      ],
      "metadata": {
        "id": "3Y_ioUQ5_2Lk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=int(input())\n",
        "sum=0\n",
        "while(a!=0):\n",
        "    sum=sum*10+(a%10)\n",
        "    a//=10\n",
        "print(sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iQDywVgE_7Rt",
        "outputId": "b5304850-7edb-4ea7-d5bb-637780b4df3c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1234\n",
            "4321\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to print the following pattern\n",
        "   \n",
        "        *         \n",
        "      * * *       \n",
        "    * * * * *     \n",
        "  * * * * * * *   \n",
        "* * * * * * * * *"
      ],
      "metadata": {
        "id": "IMU971TgAJYC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(5):\n",
        "    for j in range(4-i):\n",
        "        print(\" \",end=\" \")\n",
        "    for k in range(i+1):\n",
        "        print(\"*\",end=\" \")\n",
        "    for x in range(i):\n",
        "        print(\"*\",end=\" \")\n",
        "    for n in range(4-i):\n",
        "        print(\" \",end=\" \")\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RgpjH4qgANTt",
        "outputId": "f2a4525f-c46a-4ded-d54c-0729cb9d98f1"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        *         \n",
            "      * * *       \n",
            "    * * * * *     \n",
            "  * * * * * * *   \n",
            "* * * * * * * * * \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program to print the Fibonacci Series up to 10 terms."
      ],
      "metadata": {
        "id": "Fm5w2K0eAVtL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n=int(input(\"Enter a:\\n\"))\n",
        "a=0\n",
        "b=1\n",
        "if n<=1:\n",
        "    print(a)\n",
        "    print(b)\n",
        "else:\n",
        "    print(a)\n",
        "    print(b)\n",
        "    for i in range(3,n+1):\n",
        "        res=a+b\n",
        "        a=b\n",
        "        b=res\n",
        "        print(res)\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gxwgaNpoAZyN",
        "outputId": "040f0c44-80a1-4aa9-a27c-d8edb5efe5e1"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a:\n",
            "10\n",
            "0\n",
            "1\n",
            "1\n",
            "2\n",
            "3\n",
            "5\n",
            "8\n",
            "13\n",
            "21\n",
            "34\n"
          ]
        }
      ]
    }
  ]
}